<program> ::= <program-name> <declarations> BEGIN <stmt-list> END.
<program-name> ::= PROGRAM <id>; | NULL
<declarations> ::= <declaration> | <declaration> <declarations> | NULL
<declaration> ::= <type> <list_variable>
<list_variable> ::= <variable> | <list_variable>, <variable>
<variable> ::= <id> | <id>[<size_array>]
<size_array> ::= <digit>
<id> ::= <char> | <id><char> | <id><digit>
<operators> ::= <operator> [{; <operator>}]
<operator> ::= <assignement> | <operator_if> | <break> | <for_loop>
<assignement> ::= <variable> := <expression>;
<stmt-list> ::= <statement> | <stmt-list> <statement>
<statement> ::= <assignment> | <operator_if> | <for_loop> | <empty_stmt>
<empty_stmt> ::= Îµ
<operator_if> ::= if <log_expression> then begin <operators> end [else <operators>];
<log_expression> ::= <operator> <operator_comparison>  <operator> | (<operator> <operator_comparison>  <operator>) or | and (<operator> <operator_comparison>  <operator>)
<operator_comparison> ::= =|<|>|<=|>=|<>
<break> ::= break
<declaration_array> ::= {var <id> : } array [<integer> .. <integer>] of <type>
<array> ::= <operator>[<integer>]
<for_loop> ::= for <id>:= <expression> do <operators> | begin <operators> end;
<expression> ::= <integer>:= <integer> to | downto <integer>
<expression> := <term> | <expression> <operator_sum> <term>
<term> ::= <factor> | <term> <operator_mul> <factor>
<factor> ::= <variable> | <const> | ( <expression> )
<const> ::= <digit> | <real> | <boolean> | <char> | <string>
<string> ::= <char> [{; <char>}]
<type> := <integer> | <char> | <string> | <boolean> | <real>
<input_output> ::= readln(<list_variable>) | writeln(<list_expression>).